{"version":3,"file":"static/js/816.ce806ea0.chunk.js","mappings":"qOAIMA,EAAoBC,EAAAA,GAAAA,IAAH,2VAkEvB,EAvC8C,SAAC,GAGxC,IAFLC,EAEI,EAFJA,WACAC,EACI,EADJA,cAEA,IAAKD,EAAY,OAAO,KAExB,IACME,EAAgBC,KAAKC,KAAKJ,EAAWK,QAD1B,GAGjB,OACE,UAACP,EAAD,YACE,mBACEQ,KAAK,SACLC,QAAS,kBAAMN,EAAcD,EAAWQ,KAAO,IAC/CC,SAA8B,IAApBT,EAAWQ,KAHvB,oBAOCE,MAAMC,KAAKD,MAAMR,GAAeU,QAAQC,KAAI,SAACC,GAAD,OAC3C,mBACER,KAAK,SAELC,QAAS,kBAAMN,EAAca,EAAa,IAC1CC,UAAWf,EAAWQ,OAASM,EAAa,EAAI,SAAW,GAJ7D,SAMGA,EAAa,GAJTA,OAOT,mBACER,KAAK,SACLC,QAAS,kBAAMN,EAAcD,EAAWQ,KAAO,IAC/CC,SAAUT,EAAWQ,OAASN,EAHhC,wBCzDOc,EAAejB,EAAAA,GAAAA,IAAH,qHAYZkB,EAAQlB,EAAAA,GAAAA,MAAH,kDAILmB,EAAqBnB,EAAAA,GAAAA,GAAH,gDAIlBoB,EAAcpB,EAAAA,GAAAA,GAAH,8jBAsCXqB,EAAWrB,EAAAA,GAAAA,GAAH,iMC4BrB,EA1EmC,SAAC,GAK7B,IAJLsB,EAII,EAJJA,KACArB,EAGI,EAHJA,WACAC,EAEI,EAFJA,cACAqB,EACI,EADJA,mBAEA,GAAoCC,EAAAA,EAAAA,UAAmB,IAAvD,eAAOC,EAAP,KAAmBC,EAAnB,KAEA,UAAwCD,EAAxC,GAAOE,EAAP,KAAqBC,EAArB,KASA,OAPAC,EAAAA,EAAAA,YAAU,WACRN,EAAmB,CACjBO,OAAQH,EACRI,UAAWH,MAEZ,CAACD,EAAcC,KAGhB,UAACX,EAAD,YACE,UAACC,EAAD,YACE,4BACE,SAACC,EAAD,UAdW,CAAC,WAAY,OAAQ,QAAS,SAAU,mBAerCL,KAAI,SAACkB,GACf,IAAMC,EAAmB,GACzB,UAAoDR,EAApD,GAAOS,EAAP,KAA2BC,EAA3B,KACMC,EAAaJ,EAAOK,MAAM,KAAK,GAUrC,OARIH,IAAuBE,IACK,QAA1BD,EACFF,EAAiBK,KAAK,OACa,QAA1BH,GACTF,EAAiBK,KAAK,SAKxB,SAAClB,EAAD,CAEEJ,UAAWiB,EAAiBM,KAAK,KACjC/B,QAAS,WACP,IAAMuB,ECpDoC,qBDqD5BI,GACc,QAA1BA,EACI,MACA,MACNT,EAAc,CAACU,EAAYL,KAT/B,SAYGC,GAXIA,WAiBf,2BACGV,GACCA,EAAKR,KAAI,SAAC0B,GAAD,OACP,UAACnB,EAAD,YACE,wBAAKmB,EAAKC,MAAMC,YAChB,0BACGF,EAAKG,KAAKC,MADb,IACqBJ,EAAKG,KAAKE,SAE/B,wBAAKL,EAAKM,SACV,wBAAKN,EAAKO,UACV,yBC1EiBC,ED0EKR,EAAKS,WAAWD,KCzEpD,IAAIE,KAAKF,GAAMG,eAAe,QAAS,CAAEC,SAAU,aDkExBZ,EAAKC,MAAMC,UCnER,IAACM,WD+E3B,SAAC,EAAD,CAAiB/C,WAAYA,EAAYC,cAAeA","sources":["components/Table/TablePagination.tsx","components/Table/styles.tsx","components/Table/index.tsx","components/Table/helper.ts"],"sourcesContent":["import { FC } from 'react'\nimport styled from 'styled-components'\nimport { IUserResponse } from '../../interfaces'\n\nconst PaginationWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 20px;\n\n  button {\n    margin-right: 8px;\n    background: #ffffff;\n    border: 1px solid #e6e9eb;\n    cursor: pointer;\n\n    &.active {\n      color: #339fff;\n      border-color: #339fff;\n    }\n\n    &:last-child {\n      margin-right: 0;\n    }\n  }\n`\n\ninterface ITablePagination {\n  pagination?: IUserResponse['info']\n  handleSetPage: (page: number) => void\n}\n\nconst TablePagination: FC<ITablePagination> = ({\n  pagination,\n  handleSetPage,\n}) => {\n  if (!pagination) return null\n\n  const sizePage = 5\n  const numberOfPages = Math.ceil(pagination.results / sizePage)\n\n  return (\n    <PaginationWrapper>\n      <button\n        type=\"button\"\n        onClick={() => handleSetPage(pagination.page - 1)}\n        disabled={pagination.page === 1}\n      >\n        &lang;\n      </button>\n      {Array.from(Array(numberOfPages).keys()).map((pageNumber) => (\n        <button\n          type=\"button\"\n          key={pageNumber}\n          onClick={() => handleSetPage(pageNumber + 1)}\n          className={pagination.page === pageNumber + 1 ? 'active' : ''}\n        >\n          {pageNumber + 1}\n        </button>\n      ))}\n      <button\n        type=\"button\"\n        onClick={() => handleSetPage(pagination.page + 1)}\n        disabled={pagination.page === numberOfPages}\n      >\n        &rang;\n      </button>\n    </PaginationWrapper>\n  )\n}\n\nexport default TablePagination\n","import styled from 'styled-components'\n\nexport const TableWrapper = styled.div`\n  flex: 0 0 100%;\n\n  table {\n    width: 100%;\n\n    th {\n      width: 20%;\n    }\n  }\n`\n\nexport const Table = styled.table`\n  border-spacing: unset;\n`\n\nexport const TableHeaderWrapper = styled.tr`\n  background: #efecec;\n`\n\nexport const TableHeader = styled.th`\n  position: relative;\n  text-align: left;\n  padding: 18px 4px;\n  text-transform: capitalize;\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    top: 50%;\n    right: 12px;\n    border: 5px solid transparent;\n  }\n\n  &::before {\n    border-bottom-color: #bdbdbd;\n    margin-top: -12px;\n  }\n\n  &::after {\n    border-top-color: #bdbdbd;\n    margin-top: 1px;\n  }\n\n  &.asc {\n    &::after {\n      border-top-color: green;\n    }\n  }\n\n  &.dsc {\n    &::before {\n      border-bottom-color: green;\n    }\n  }\n`\n\nexport const TableRow = styled.tr`\n  td {\n    border-bottom: 1px solid #efecec;\n    padding: 10px 4px;\n    font-size: 12px;\n  }\n\n  &:last-child {\n    td {\n      border-bottom: unset;\n    }\n  }\n`\n","import { FC, useEffect, useState } from 'react'\n\nimport TablePagination from './TablePagination'\n\nimport { formatStringDate, isUndefined } from './helper'\nimport {\n  Table,\n  TableHeader,\n  TableHeaderWrapper,\n  TableRow,\n  TableWrapper,\n} from './styles'\nimport { ITable } from './interfaces'\n\nconst TableComponent: FC<ITable> = ({\n  rows,\n  pagination,\n  handleSetPage,\n  handleUpdateFilter,\n}) => {\n  const [sortHeader, setSortHeader] = useState<string[]>([])\n  const headerList = ['username', 'name', 'Email', 'gender', 'registered date']\n  const [headerSortBy, headerSortOrder] = sortHeader\n\n  useEffect(() => {\n    handleUpdateFilter({\n      sortBy: headerSortBy,\n      sortOrder: headerSortOrder,\n    })\n  }, [headerSortBy, headerSortOrder])\n\n  return (\n    <TableWrapper>\n      <Table>\n        <thead>\n          <TableHeaderWrapper>\n            {headerList.map((header) => {\n              const tableHeaderClass = []\n              const [headerActiveSortBy, headerActiveSortOrder] = sortHeader\n              const headerName = header.split(' ')[0]\n\n              if (headerActiveSortBy === headerName) {\n                if (headerActiveSortOrder === 'asc') {\n                  tableHeaderClass.push('asc')\n                } else if (headerActiveSortOrder === 'dsc') {\n                  tableHeaderClass.push('dsc')\n                }\n              }\n\n              return (\n                <TableHeader\n                  key={header}\n                  className={tableHeaderClass.join(' ')}\n                  onClick={() => {\n                    const sortOrder =\n                      isUndefined(headerActiveSortOrder) ||\n                      headerActiveSortOrder === 'dsc'\n                        ? 'asc'\n                        : 'dsc'\n                    setSortHeader([headerName, sortOrder])\n                  }}\n                >\n                  {header}\n                </TableHeader>\n              )\n            })}\n          </TableHeaderWrapper>\n        </thead>\n        <tbody>\n          {rows &&\n            rows.map((user) => (\n              <TableRow key={user.login.username}>\n                <td>{user.login.username}</td>\n                <td>\n                  {user.name.first} {user.name.last}\n                </td>\n                <td>{user.email}</td>\n                <td>{user.gender}</td>\n                <td>{formatStringDate(user.registered.date)}</td>\n              </TableRow>\n            ))}\n        </tbody>\n      </Table>\n      <TablePagination pagination={pagination} handleSetPage={handleSetPage} />\n    </TableWrapper>\n  )\n}\n\nexport default TableComponent\n","export const snakeCaseFormatter = (text: string) => text.split(' ').join('-')\n\nexport const isUndefined = (test: unknown) => typeof test === 'undefined'\n\nexport const formatStringDate = (date: string) =>\n  new Date(date).toLocaleString('id-ID', { timeZone: 'UTC' })\n"],"names":["PaginationWrapper","styled","pagination","handleSetPage","numberOfPages","Math","ceil","results","type","onClick","page","disabled","Array","from","keys","map","pageNumber","className","TableWrapper","Table","TableHeaderWrapper","TableHeader","TableRow","rows","handleUpdateFilter","useState","sortHeader","setSortHeader","headerSortBy","headerSortOrder","useEffect","sortBy","sortOrder","header","tableHeaderClass","headerActiveSortBy","headerActiveSortOrder","headerName","split","push","join","user","login","username","name","first","last","email","gender","date","registered","Date","toLocaleString","timeZone"],"sourceRoot":""}